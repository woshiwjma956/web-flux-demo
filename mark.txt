https://github.com/sunxpin/spring-webflux.git

https://www.jianshu.com/p/b70c4692f97a
== Stream ==
== 惰性求值 com.ycorn.stream.StreamTest.lazyLoad ==
如果Stream中没有调用终止操作,不会执行中间操作

== 中间操作分为 有状态和无状态 ==
    无状态操作 filter,map,flatMap,mapToXXX,peek,unordered
    有状态操作 sorted,distinct,limit,skip
== 终止操作 分为短路 非短路操作 ==
    非短路操作 foreach,foreachOrdered,toArray,reduce,collect,max,min,count
    短路操作 findFirst,findAny,noneMatch,allMatch,anyMatch

== Stream收集器 Collectors ==
    常用方法toList, toSet, 汇总信息summingXXX , counting
    分组  分组groupBy 分块partitionBy(分两组)
    groupBy 第二个重构方法可以传入2个参数 第一个参数是functional 入参为元素 出参为Key,第二个参数是对分组之后元素的操作 implementing the downstream reduction 如Collectors.counting max 等一些Collectors的操作

运行机制
    Head -> nextStage
    并行默认使用ForkJoinPoll

并行流
foreach 和 foreachOrder
在并行流中使用foreach是无序的foreachOrder是有序的
parallel()
sequential()
多次调用parallel 和 sequential  以最后一次为准


Stream运行机制简单总结
1.所有操作都是链式调用,一个元素只循环一次
2.每一个中间操作返回一个新的流,流中有一个属性sourceStage都指向同一个头Head
3.Head -> nextStage -> nextStage -> null
4.有状态操作会截断无状态操作,单独处理
5.并行环境下,有状态的中间操作不一定并行操作
6.parallel 和 sequential 也是中间操作也返回流,但是他们不状态流,只是修改Head的并行parallel标志位

== Java 9 React Stream ==
Publisher 发布者  SubmissionPublisher this.submit()
Subscriber 订阅者 实现 Subscriber
Processor 中间处理器 pipeline中间环节 实现Processor 接口
    在建立连接 onSubscribe中保存subscription 并申请数据  this.subscription.request(1);
    在onNext 中 当获取到数据之后处理完毕之后调用  this.subscription.request(1);获取数据



== WebFlux ==


== SSE server send event ==

== WebExchangeBindException ==
老的Spring MVC 参数校验
@ExceptionHandler(BindException.class)
如果使用Spring 的@Validated     @ExceptionHandler(MethodArgumentNotValidException.class)
新的WebFlux 参数校验
@ExceptionHandler(WebExchangeBindException.class)


RouterFunction 模式
Webflux 是 Spring Cloud 2.0 Gateway 的实现方式, RouterFunction 就是Gateway 中的routes的实现
RouterFunction 是一个路由器,绑定了predict来断言请求, 再绑定一个返回HandlerFunction的方法
这里是链式调用,注意route里面包裹的路径
@Bean
RouterFunction<ServerResponse> userRouter(UserHandler userHandler) {
    return nest(RequestPredicates.path("/user"),
            route(GET("/{id}"), userHandler::findById)
                    .andRoute(GET("/"), userHandler::findAll)
                    .andRoute(POST("/").and(RequestPredicates.accept(MediaType.APPLICATION_JSON)), userHandler::create)
                    .andRoute(PUT("/{id}"), userHandler::update)
                    .andRoute(DELETE("/{id}"), userHandler::delete));
}

== 采坑 ==
使用注解 @GetMapping 和 @RequestBody 需要返回Mono
使用@Valid 需要接受参数是Mono<T>
@PostMapping(value = "/user/valid", produces = MediaType.APPLICATION_JSON_VALUE)
 public Mono<User> createValid(@Validated @RequestBody Mono<User> userMono) {
     return userMono.flatMap(userRepository::save);
 }

WebClient 模式